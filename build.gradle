// Top-level build file for adding configuration options common to all sub-projects/modules.
//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrUnresolvedAccess

buildscript {
    ext {
        // sdk versions
        compile_sdk_version = 33
        build_tools_version = "30.0.3"
        min_sdk_version = 21
        target_sdk_version = 33
        /* to check the latest version @see
[
https://play.google.com/console/u/0/developers/6867856033872987263/app/4974045020812963921/releases/overview
]
*/
        version_code = 19
        version_name = "1.0.9"
    }
    repositories {
        // Google's Maven repository
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath "com.google.dagger:hilt-android-gradle-plugin:$hiltVersion"

        // Google Services plugin (required for firebase)
        classpath 'com.google.gms:google-services:4.3.15'

        // firebase
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.5'
        classpath 'com.google.firebase:perf-plugin:1.4.2'
        classpath 'com.google.firebase:firebase-appdistribution-gradle:4.0.0'
    }
}
ext {
    getParam = { key ->
        def value = System.getenv(key) ?: project.findProperty("env.$key")
        return value
    }

    DATABASE_NAME = getParam("DATABASE_SONGS")

    SIGNING_KEY_DEBUG_PATH = getParam("SIGNING_KEY_DEBUG_PATH")
    SIGNING_KEY_DEBUG_PASSWORD = getParam("SIGNING_KEY_DEBUG_PASSWORD")
    SIGNING_KEY_DEBUG_KEY = getParam("SIGNING_KEY_DEBUG_KEY")
    SIGNING_KEY_DEBUG_KEY_PASSWORD = getParam("SIGNING_KEY_DEBUG_KEY_PASSWORD")

    SIGNING_KEY_RELEASE_PATH = getParam("SIGNING_KEY_RELEASE_PATH")
    SIGNING_KEY_RELEASE_PASSWORD = getParam("SIGNING_KEY_RELEASE_PASSWORD")
    SIGNING_KEY_RELEASE_KEY = getParam("SIGNING_KEY_RELEASE_KEY")
    SIGNING_KEY_RELEASE_KEY_PASSWORD = getParam("SIGNING_KEY_RELEASE_KEY_PASSWORD")
}

subprojects {
    afterEvaluate {
        dependencies {
            // dependency injection (Dagger Hilt)
            //noinspection GrUnresolvedAccess
            annotationProcessor "com.google.dagger:hilt-android-compiler:$hiltVersion"
            annotationProcessor "androidx.hilt:hilt-compiler:$hiltAndroidXVersion"
            implementation "com.google.dagger:hilt-core:$hiltVersion"

            // Asynchronous programming (Reactive Extensions)
            implementation "io.reactivex.rxjava3:rxandroid:$rxAndroidVersion"
            implementation "com.github.akarnokd:rxjava3-bridge:$rxAndroidVersion"
            implementation "io.reactivex.rxjava3:rxjava:$rxJavaVersion"
        }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << '-Xmaxerrs' << '500'
            }
        }
    }
}

allprojects {
    repositories {
        // Google's Maven repository
        google()
        mavenCentral()
    }
}

tasks.register('clean') {
    delete rootProject.buildDir
}
